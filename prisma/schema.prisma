generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Events {
  name              String
  track             String?
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  approved          Boolean          @default(false)
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link              String?          @default("")
  trackId           String?          @db.Uuid
  description       String?
  responses         EventResponses[]
  eventTrack        Tracks?          @relation(fields: [trackId], references: [id])
  enableTicketing   Boolean          @default(false)
  ticketCapacity    Int?
  EventTickets      EventTickets[]
  ticketReleaseDate DateTime?
  earlyAccessCode   String?
  ticketPrice       Float?
}

model EventTickets {
  id        Int          @id @default(autoincrement())
  eventId   String       @db.Uuid
  event     Events       @relation(fields: [eventId], references: [id])
  userId    String?
  user      Users?       @relation(fields: [userId], references: [id])
  status    TicketStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  sessionId String?

  @@unique([eventId, userId])
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

model EventResponses {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  userId  String?
  eventId String  @db.Uuid
  event   Events  @relation(fields: [eventId], references: [id])
  user    Users?  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Tournaments {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now()) @updatedAt
  nextBattleId        Int?                @unique
  format              TournamentsFormat   @default(STANDARD)
  qualifyingLaps      Int                 @default(1)
  state               TournamentsState    @default(START)
  userId              String?
  nextQualifyingLapId Int?                @unique
  liveUrl             String?
  drivers             TournamentDrivers[]
  judges              TournamentJudges[]
  user                Users?              @relation(fields: [userId], references: [id])
  nextQualifyingLap   Laps?               @relation(fields: [nextQualifyingLapId], references: [id])
  battles             TournamentBattles[]
  nextBattle          TournamentBattles?  @relation("tournamentNextBattle", fields: [nextBattleId], references: [id])
}

model TournamentDrivers {
  tournamentId       String              @db.Uuid
  qualifyingPosition Int?
  createdAt          DateTime            @default(now())
  id                 Int                 @id @default(autoincrement())
  driverId           Int
  user               Users               @relation(fields: [driverId], references: [driverId])
  laps               Laps[]
  tournament         Tournaments         @relation(fields: [tournamentId], references: [id])
  leftBattles        TournamentBattles[] @relation("battleDriverLeft")
  rightBattles       TournamentBattles[] @relation("battleDriverRight")
  isBye              Boolean             @default(false)
}

model TournamentJudges {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime                @default(now())
  tournamentId String                  @db.Uuid
  tournament   Tournaments             @relation(fields: [tournamentId], references: [id])
  driverId     Int
  user         Users                   @relation(fields: [driverId], references: [driverId])
  scores       LapScores[]
  BattleVotes  TournamentBattleVotes[]
}

model Laps {
  id                 Int               @id @default(autoincrement())
  tournamentDriverId Int
  scores             LapScores[]
  driver             TournamentDrivers @relation(fields: [tournamentDriverId], references: [id])
  tournament         Tournaments?
}

model LapScores {
  score   Float
  lapId   Int
  judgeId String           @db.Uuid
  lap     Laps             @relation(fields: [lapId], references: [id])
  judge   TournamentJudges @relation(fields: [judgeId], references: [id])

  @@unique([judgeId, lapId])
}

model TournamentBattles {
  id            Int                     @id @default(autoincrement())
  createdAt     DateTime                @default(now())
  tournamentId  String                  @db.Uuid
  tournament    Tournaments             @relation(fields: [tournamentId], references: [id])
  driverLeftId  Int?
  driverLeft    TournamentDrivers?      @relation("battleDriverLeft", fields: [driverLeftId], references: [id])
  driverRightId Int?
  driverRight   TournamentDrivers?      @relation("battleDriverRight", fields: [driverRightId], references: [id])
  winnerId      Int?
  isNextBattle  Tournaments?            @relation("tournamentNextBattle")
  bracket       BattlesBracket          @default(UPPER)
  round         Int                     @default(0)
  BattleVotes   TournamentBattleVotes[]
}

model TournamentBattleVotes {
  id       Int               @id @default(autoincrement())
  battleId Int
  winnerId Int?
  judgeId  String            @db.Uuid
  omt      Boolean           @default(false)
  battle   TournamentBattles @relation(fields: [battleId], references: [id])
  judge    TournamentJudges  @relation(fields: [judgeId], references: [id])

  @@unique([judgeId, battleId])
}

model Tracks {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  image       String
  lat         Float
  lng         Float
  types       TrackTypes[]
  url         String
  slug        String       @default("")
  events      Events[]
  Products    Products[]
  owners      Users[]
}

model DriverRatingBattles {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  tournament String
  loserId    Int
  winnerId   Int
  loser      Users    @relation("driverRatingsLosses", fields: [loserId], references: [driverId])
  winner     Users    @relation("driverRatingsWins", fields: [winnerId], references: [driverId])
}

model Users {
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @updatedAt
  driverId          Int                   @id @default(autoincrement())
  id                String?               @unique
  firstName         String?
  image             String?
  lastName          String?
  trackId           String?               @db.Uuid
  team              String?
  events            EventResponses[]
  track             Tracks?               @relation(fields: [trackId], references: [id])
  Tournaments       Tournaments[]
  ratingsLosses     DriverRatingBattles[] @relation("driverRatingsLosses")
  ratingsWins       DriverRatingBattles[] @relation("driverRatingsWins")
  TournamentJudges  TournamentJudges[]
  TournamentDrivers TournamentDrivers[]
  EventTickets      EventTickets[]
}

model Products {
  slug        String        @id
  title       String
  image       String
  description String
  shop        Shops
  url         String
  trackId     String?       @db.Uuid
  status      ProductStatus @default(UNKNOWN)
  Tracks      Tracks?       @relation(fields: [trackId], references: [id])
}

enum TrackTypes {
  ALL
  TRACKS
  CLUBS
  SHOPS
}

enum Shops {
  ASBO
  RCKITOUT
  A0_RCKITOUT
  DRIFTMANJI
  SLIDEDYNAMICS
  RCPACE
  MODELSHOPDIRECT
  SLIDEHOUSE
}

enum ProductStatus {
  IN_STOCK
  SOLD_OUT
  BACKORDER
  UNKNOWN
}

enum TournamentsState {
  START
  QUALIFYING
  BATTLES
  END
}

enum TournamentsFormat {
  STANDARD
  DOUBLE_ELIMINATION
}

enum BattlesBracket {
  UPPER
  LOWER
}
