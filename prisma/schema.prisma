generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Events {
  name        String
  track       String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  approved    Boolean          @default(false)
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link        String?          @default("")
  trackId     String?          @db.Uuid
  description String?
  responses   EventResponses[]
  eventTrack  Tracks?          @relation(fields: [trackId], references: [id])
  Tournaments Tournaments?
}

model EventResponses {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  userId  String
  eventId String @db.Uuid
  event   Events @relation(fields: [eventId], references: [id])
  user    Users  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Tracks {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  image       String
  lat         Float
  lng         Float
  types       TrackTypes[]
  url         String
  slug        String        @default("")
  events      Events[]
  Products    Products[]
  Users       Users[]
  PollEntries PollEntries[]
}

model Drivers {
  id              String                  @id @default(dbgenerated("gen_random_uuid()"))
  createdAt       DateTime                @default(now())
  name            String
  champNo         Int?
  team            String?
  qualiPositions  Int[]
  battleStandings DriverBattleStandings[]
  ratingsLosses   DriverRatingBattles[]   @relation("driverRatingsLosses")
  ratingsWins     DriverRatingBattles[]   @relation("driverRatingsWins")
  Users           Users[]
}

model DriverRatingBattles {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  tournament String
  loserId    String
  winnerId   String
  loser      Drivers  @relation("driverRatingsLosses", fields: [loserId], references: [id])
  winner     Drivers  @relation("driverRatingsWins", fields: [winnerId], references: [id])
}

model DriverBattleStandings {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  id         Int      @id @default(autoincrement())
  tournament String
  driverId   String
  position   Int
  qualiBonus Int      @default(0)
  driver     Drivers  @relation(fields: [driverId], references: [id])
}

model Users {
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  id        String           @id
  firstName String?
  image     String?
  lastName  String?
  driverId  String?
  trackId   String?          @db.Uuid
  events    EventResponses[]
  Drivers   Drivers?         @relation(fields: [driverId], references: [id])
  Tracks    Tracks?          @relation(fields: [trackId], references: [id])
}

model Products {
  slug        String        @id
  title       String
  image       String
  description String
  shop        Shops
  url         String
  trackId     String?       @db.Uuid
  status      ProductStatus @default(UNKNOWN)
  Tracks      Tracks?       @relation(fields: [trackId], references: [id])
}

model LapScores {
  score   Float
  lapId   Int
  judgeId String @db.Uuid
  Laps    Laps   @relation(fields: [lapId], references: [id])

  @@unique([judgeId, lapId])
}

model Laps {
  id                 Int               @id @default(autoincrement())
  tournamentDriverId Int
  LapScores          LapScores[]
  TournamentDrivers  TournamentDrivers @relation(fields: [tournamentDriverId], references: [id])
  Tournaments        Tournaments?
}

model TournamentDrivers {
  id                 Int         @id @default(autoincrement())
  createdAt          DateTime    @default(now())
  tournamentId       String      @db.Uuid
  name               String
  qualifyingPosition Int?
  Laps               Laps[]
  Tournaments        Tournaments @relation(fields: [tournamentId], references: [id])
}

model TournamentJudges {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime    @default(now())
  name         String
  tournamentId String      @db.Uuid
  Tournaments  Tournaments @relation(fields: [tournamentId], references: [id])
}

model Tournaments {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  nextBattleId        String?             @db.Uuid
  nextQualifyingLapId Int?                @unique
  format              TournamentsFormat   @default(STANDARD)
  qualifyingLaps      Int                 @default(1)
  state               TournamentsState    @default(START)
  eventId             String              @unique @db.Uuid
  TournamentDrivers   TournamentDrivers[]
  TournamentJudges    TournamentJudges[]
  Events              Events              @relation(fields: [eventId], references: [id])
  Laps                Laps?               @relation(fields: [nextQualifyingLapId], references: [id])
}

model PollEntries {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  entryId   String
  deviceId  String
  trackId   String   @db.Uuid
  Tracks    Tracks   @relation(fields: [trackId], references: [id])

  @@unique([entryId, deviceId, trackId])
}

enum TrackTypes {
  ALL
  TRACKS
  CLUBS
  SHOPS
}

enum Shops {
  ASBO
  RCKITOUT
  DRIFTMANJI
  SLIDEDYNAMICS
  RCPACE
  MODELSHOPDIRECT
  A0_RCKITOUT
  SLIDEHOUSE
}

enum ProductStatus {
  IN_STOCK
  SOLD_OUT
  BACKORDER
  UNKNOWN
}

enum TournamentsFormat {
  STANDARD
  DOUBLE_ELIMINATION
}

enum TournamentsState {
  START
  QUALIFYING
  BATTLES
  END
}
