generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Events {
  cover             String?
  name              String
  track             String?
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link              String?          @default("")
  trackId           String?          @db.Uuid
  description       String?
  responses         EventResponses[]
  eventTrack        Tracks?          @relation(fields: [trackId], references: [id])
  enableTicketing   Boolean          @default(false)
  ticketCapacity    Int?
  EventTickets      EventTickets[]
  ticketReleaseDate DateTime?
  earlyAccessCode   String?
  ticketPrice       Float?
}

model EventTickets {
  id        Int          @id @default(autoincrement())
  eventId   String       @db.Uuid
  event     Events       @relation(fields: [eventId], references: [id])
  userId    String?
  user      Users?       @relation(fields: [userId], references: [id])
  status    TicketStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  sessionId String?

  @@unique([eventId, userId])
}

model EventResponses {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  userId  String?
  eventId String  @db.Uuid
  event   Events  @relation(fields: [eventId], references: [id])
  user    Users?  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Tournaments {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now()) @updatedAt
  nextBattleId        Int?                @unique
  format              TournamentsFormat   @default(STANDARD)
  qualifyingLaps      Int                 @default(1)
  state               TournamentsState    @default(START)
  userId              String?
  nextQualifyingLapId Int?                @unique
  liveUrl             String?
  drivers             TournamentDrivers[]
  judges              TournamentJudges[]
  user                Users?              @relation(fields: [userId], references: [id])
  nextQualifyingLap   Laps?               @relation(fields: [nextQualifyingLapId], references: [id])
  battles             TournamentBattles[]
  nextBattle          TournamentBattles?  @relation("tournamentNextBattle", fields: [nextBattleId], references: [id])
  fullInclusion       Boolean             @default(false)
  region              Regions?
  rated               Boolean             @default(false)
  tracks              TrackTournaments[]
}

model TournamentDrivers {
  tournamentId       String              @db.Uuid
  qualifyingPosition Int?
  createdAt          DateTime            @default(now())
  id                 Int                 @id @default(autoincrement())
  driverId           Int
  user               Users               @relation(fields: [driverId], references: [driverId])
  laps               Laps[]
  tournament         Tournaments         @relation(fields: [tournamentId], references: [id])
  leftBattles        TournamentBattles[] @relation("battleDriverLeft")
  rightBattles       TournamentBattles[] @relation("battleDriverRight")
  isBye              Boolean             @default(false)
}

model TournamentJudges {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime                @default(now())
  tournamentId String                  @db.Uuid
  tournament   Tournaments             @relation(fields: [tournamentId], references: [id])
  driverId     Int
  user         Users                   @relation(fields: [driverId], references: [driverId])
  scores       LapScores[]
  BattleVotes  TournamentBattleVotes[]

  @@unique([tournamentId, driverId])
}

model Laps {
  id                 Int               @id @default(autoincrement())
  tournamentDriverId Int
  scores             LapScores[]
  driver             TournamentDrivers @relation(fields: [tournamentDriverId], references: [id])
  tournament         Tournaments?
}

model LapScores {
  score   Float
  lapId   Int
  judgeId String           @db.Uuid
  lap     Laps             @relation(fields: [lapId], references: [id])
  judge   TournamentJudges @relation(fields: [judgeId], references: [id])

  @@unique([judgeId, lapId])
}

model TournamentBattles {
  id            Int      @id @default(autoincrement())
  round         Int      @default(0)
  createdAt     DateTime @default(now())
  tournamentId  String   @db.Uuid
  driverLeftId  Int?
  driverRightId Int?
  winnerId      Int?

  winnerStartingElo Float?
  winnerElo         Float?

  loserStartingElo Float?
  loserElo         Float?

  winnerRegionalStartingElo Float?
  winnerRegionalElo         Float?

  loserRegionalStartingElo Float?
  loserRegionalElo         Float?

  tournament   Tournaments             @relation(fields: [tournamentId], references: [id])
  driverLeft   TournamentDrivers?      @relation("battleDriverLeft", fields: [driverLeftId], references: [id])
  driverRight  TournamentDrivers?      @relation("battleDriverRight", fields: [driverRightId], references: [id])
  isNextBattle Tournaments?            @relation("tournamentNextBattle")
  bracket      BattlesBracket          @default(UPPER)
  BattleVotes  TournamentBattleVotes[]
}

model TournamentBattleVotes {
  id       Int               @id @default(autoincrement())
  battleId Int
  winnerId Int?
  judgeId  String            @db.Uuid
  omt      Boolean           @default(false)
  battle   TournamentBattles @relation(fields: [battleId], references: [id])
  judge    TournamentJudges  @relation(fields: [judgeId], references: [id])

  @@unique([judgeId, battleId])
}

model Tracks {
  createdAt   DateTime           @default(now())
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  image       String
  cover       String?
  lat         Float
  lng         Float
  types       TrackTypes[]
  url         String
  slug        String             @unique
  events      Events[]
  Products    Products[]
  Owners      TrackOwners[]
  status      TrackStatus        @default(PENDING)
  address     String?
  tournaments TrackTournaments[]
}

model TrackOwners {
  trackId String @db.Uuid
  userId  String
  track   Tracks @relation(fields: [trackId], references: [id])
  user    Users  @relation(fields: [userId], references: [id])

  @@unique([trackId, userId])
}

model TrackTournaments {
  trackId      String      @db.Uuid
  tournamentId String      @db.Uuid
  track        Tracks      @relation(fields: [trackId], references: [id])
  tournament   Tournaments @relation(fields: [tournamentId], references: [id])

  @@unique([trackId, tournamentId])
}

model Users {
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  driverId          Int                 @id @default(autoincrement())
  id                String?             @unique
  firstName         String?
  image             String?
  lastName          String?
  team              String?
  elo               Float               @default(1000)
  elo_UK            Float               @default(1000)
  elo_EU            Float               @default(1000)
  elo_NA            Float               @default(1000)
  elo_APAC          Float               @default(1000)
  elo_LATAM         Float               @default(1000)
  elo_MEA           Float               @default(1000)
  totalBattles      Int                 @default(0)
  events            EventResponses[]
  Tournaments       Tournaments[]
  TournamentJudges  TournamentJudges[]
  TournamentDrivers TournamentDrivers[]
  EventTickets      EventTickets[]
  Tracks            TrackOwners[]
  PostLikes         PostLikes[]
  PostComments      PostComments[]
  Posts             Posts[]
}

model Products {
  slug        String        @id
  title       String
  image       String
  description String?
  shop        Shops
  url         String
  trackId     String?       @db.Uuid
  status      ProductStatus @default(UNKNOWN)
  Tracks      Tracks?       @relation(fields: [trackId], references: [id])
}

model Articles {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  image     String
  slug      String   @unique
}

model Posts {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  content   String
  images    String[]
  likes     PostLikes[]
  comments  PostComments[]
  userId    String
  user      Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostLikes {
  id        Int      @id @default(autoincrement())
  postId    Int?
  userId    String
  createdAt DateTime @default(now())
  Posts     Posts?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model PostComments {
  id        Int            @id @default(autoincrement())
  postId    Int
  createdAt DateTime       @default(now())
  content   String
  Posts     Posts?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    PostComments?  @relation("parentComment", fields: [parentId], references: [id], onDelete: Cascade)
  children  PostComments[] @relation("parentComment")
  userId    String
  user      Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TrackTypes {
  ALL
  TRACKS
  CLUBS
  SHOPS
}

enum Shops {
  ASBO
  RCKITOUT
  A0_RCKITOUT
  DRIFTMANJI
  SLIDEDYNAMICS
  RCPACE
  MODELSHOPDIRECT
  SLIDEHOUSE
}

enum ProductStatus {
  IN_STOCK
  SOLD_OUT
  BACKORDER
  UNKNOWN
}

enum TournamentsState {
  START
  QUALIFYING
  BATTLES
  END
}

enum TournamentsFormat {
  STANDARD
  DOUBLE_ELIMINATION
  DRIFT_WARS
}

enum BattlesBracket {
  UPPER
  LOWER
}

enum TrackStatus {
  ACTIVE
  ARCHIVED
  PENDING
  CLOSED
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum Regions {
  ALL
  UK
  EU
  NA
  APAC
  LATAM
  MEA
}
