generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Events {
  cover             String?
  name              String
  track             String?
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link              String?          @default("")
  trackId           String?          @db.Uuid
  description       String?
  responses         EventResponses[]
  eventTrack        Tracks?          @relation(fields: [trackId], references: [id])
  enableTicketing   Boolean          @default(false)
  ticketCapacity    Int?
  EventTickets      EventTickets[]
  ticketReleaseDate DateTime?
  earlyAccessCode   String?
  ticketPrice       Float?

  @@index([startDate])
  @@index([endDate])
  @@index([trackId])
  @@index([startDate, endDate])
  @@index([enableTicketing, startDate])
}

model EventTickets {
  id        Int          @id @default(autoincrement())
  eventId   String       @db.Uuid
  event     Events       @relation(fields: [eventId], references: [id])
  userId    String?
  user      Users?       @relation(fields: [userId], references: [id])
  status    TicketStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  sessionId String?

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@index([sessionId])
}

model EventResponses {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  userId  String?
  eventId String  @db.Uuid
  event   Events  @relation(fields: [eventId], references: [id])
  user    Users?  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Tournaments {
  id                  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  archived            Boolean                  @default(false)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @default(now()) @updatedAt
  nextBattleId        Int?                     @unique
  format              TournamentsFormat        @default(STANDARD)
  qualifyingLaps      Int                      @default(1)
  state               TournamentsState         @default(START)
  userId              String?
  nextQualifyingLapId Int?                     @unique
  liveUrl             String?
  drivers             TournamentDrivers[]
  judges              TournamentJudges[]
  user                Users?                   @relation(fields: [userId], references: [id])
  nextQualifyingLap   Laps?                    @relation(fields: [nextQualifyingLapId], references: [id])
  battles             TournamentBattles[]
  nextBattle          TournamentBattles?       @relation("tournamentNextBattle", fields: [nextBattleId], references: [id])
  fullInclusion       Boolean                  @default(false)
  enableProtests      Boolean                  @default(false)
  region              Regions?
  rated               Boolean                  @default(false)
  scoreFormula        ScoreFormula             @default(AVERAGED)
  leaderboards        LeaderboardTournaments[]
  qualifyingOrder     QualifyingOrder          @default(DRIVERS)
  qualifyingProcedure QualifyingProcedure      @default(BEST)
  driverNumbers       TournamentsDriverNumbers @default(NONE)

  @@index([state])
  @@index([archived])
  @@index([createdAt])
  @@index([userId])
  @@index([region])
  @@index([rated])
  @@index([state, archived])
  @@index([region, rated])
}

model TournamentDrivers {
  tournamentId           String              @db.Uuid
  qualifyingPosition     Int?
  createdAt              DateTime            @default(now())
  id                     Int                 @id @default(autoincrement())
  driverId               Int
  tournamentDriverNumber Int                 @default(0)
  user                   Users               @relation(fields: [driverId], references: [driverId])
  laps                   Laps[]
  tournament             Tournaments         @relation(fields: [tournamentId], references: [id])
  leftBattles            TournamentBattles[] @relation("battleDriverLeft")
  rightBattles           TournamentBattles[] @relation("battleDriverRight")
  isBye                  Boolean             @default(false)

  @@index([tournamentId])
  @@index([driverId])
  @@index([qualifyingPosition])
  @@index([tournamentId, driverId])
  @@index([tournamentId, qualifyingPosition])
}

model TournamentJudges {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime                @default(now())
  tournamentId String                  @db.Uuid
  tournament   Tournaments             @relation(fields: [tournamentId], references: [id])
  driverId     Int
  user         Users                   @relation(fields: [driverId], references: [driverId])
  scores       LapScores[]
  BattleVotes  TournamentBattleVotes[]
  points       Int                     @default(100)

  @@unique([tournamentId, driverId])
}

model BattleProtests {
  id        Int               @id @default(autoincrement())
  battleId  Int
  driverId  Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  resolved  Boolean           @default(false)
  battle    TournamentBattles @relation(fields: [battleId], references: [id])

  @@unique([battleId, driverId])
}

model Laps {
  id                 Int               @id @default(autoincrement())
  tournamentDriverId Int
  scores             LapScores[]
  driver             TournamentDrivers @relation(fields: [tournamentDriverId], references: [id])
  tournament         Tournaments?
  penalty            Int               @default(0)
  round              Int               @default(1)
}

model LapScores {
  score   Float
  lapId   Int
  judgeId String           @db.Uuid
  lap     Laps             @relation(fields: [lapId], references: [id])
  judge   TournamentJudges @relation(fields: [judgeId], references: [id])

  @@unique([judgeId, lapId])
}

model TournamentBattles {
  id            Int      @id @default(autoincrement())
  round         Int      @default(0)
  createdAt     DateTime @default(now())
  tournamentId  String   @db.Uuid
  driverLeftId  Int?
  driverRightId Int?
  winnerId      Int?

  winnerStartingElo Float?
  winnerElo         Float?

  loserStartingElo Float?
  loserElo         Float?

  winnerRegionalStartingElo Float?
  winnerRegionalElo         Float?

  loserRegionalStartingElo Float?
  loserRegionalElo         Float?

  winnerInactivityPenalty Float @default(0)
  loserInactivityPenalty  Float @default(0)

  tournament     Tournaments             @relation(fields: [tournamentId], references: [id])
  driverLeft     TournamentDrivers?      @relation("battleDriverLeft", fields: [driverLeftId], references: [id])
  driverRight    TournamentDrivers?      @relation("battleDriverRight", fields: [driverRightId], references: [id])
  isNextBattle   Tournaments?            @relation("tournamentNextBattle")
  bracket        BattlesBracket          @default(UPPER)
  BattleVotes    TournamentBattleVotes[]
  BattleProtests BattleProtests[]

  @@index([tournamentId])
  @@index([tournamentId, round])
  @@index([tournamentId, bracket])
}

model TournamentBattleVotes {
  id        Int               @id @default(autoincrement())
  battleId  Int
  winnerId  Int?
  judgeId   String            @db.Uuid
  omt       Boolean           @default(false)
  battle    TournamentBattles @relation(fields: [battleId], references: [id])
  judge     TournamentJudges  @relation(fields: [judgeId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt

  @@unique([judgeId, battleId])
}

model Tracks {
  createdAt     DateTime      @default(now())
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  image         String
  cover         String?
  lat           Float
  lng           Float
  types         TrackTypes[]
  url           String
  slug          String        @unique
  events        Events[]
  Products      Products[]
  Owners        TrackOwners[]
  status        TrackStatus   @default(PENDING)
  address       String?
  posts         Posts[]
  leaderboardId String?       @db.Uuid
  leaderboard   Leaderboards? @relation(fields: [leaderboardId], references: [id])

  @@index([status])
  @@index([types])
  @@index([lat, lng])
  @@index([createdAt])
}

model TrackOwners {
  trackId String @db.Uuid
  userId  String
  track   Tracks @relation(fields: [trackId], references: [id])
  user    Users  @relation(fields: [userId], references: [id])

  @@unique([trackId, userId])
}

model Users {
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @default(now()) @updatedAt
  driverId                Int                  @id @default(autoincrement())
  id                      String?              @unique
  firstName               String?
  image                   String?
  lastName                String?
  team                    String?
  elo                     Float                @default(1000)
  elo_UK                  Float                @default(1000)
  elo_EU                  Float                @default(1000)
  elo_NA                  Float                @default(1000)
  elo_ZA                  Float                @default(1000)
  elo_LA                  Float                @default(1000)
  elo_AP                  Float                @default(1000)
  totalBattles            Int                  @default(0)
  events                  EventResponses[]
  Tournaments             Tournaments[]
  TournamentJudges        TournamentJudges[]
  TournamentDrivers       TournamentDrivers[]
  EventTickets            EventTickets[]
  Tracks                  TrackOwners[]
  PostLikes               PostLikes[]
  PostComments            PostComments[]
  Posts                   Posts[]
  archived                Boolean              @default(false)
  carSetupChanges         CarSetupChanges[]
  lastBattleDate          DateTime?
  notifications           UserNotifications[]
  notificationsLastReadAt DateTime             @default(now())
  pushToken               String?
  threads                 ThreadUsers[]
  leaderboards            LeaderboardDrivers[]
  Leaderboards            Leaderboards[]

  @@index([elo])
  @@index([totalBattles])
  @@index([archived])
  @@index([lastBattleDate])
  @@index([team])
}

model CarSetupChanges {
  id        Int                @id @default(autoincrement())
  type      CarSetupChangeType
  value     String
  userId    String
  user      Users              @relation(fields: [userId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, type])
}

enum QualifyingOrder {
  DRIVERS
  RUNS
}

enum CarSetupChangeType {
  CHASSIS

  FRONT_CAMBER // DEGREES
  REAR_CAMBER // DEGREES
  FRONT_CASTER // DEGREES
  REAR_CASTER // DEGREES
  DIFF_TYPE // OPEN | GEARED | BALL | SPOOL | CLSD
  DIFF_OIL // THICK | MEDIUM | THIN
  FRONT_TOE // DEGREES
  REAR_TOE // DEGREES
  ACKERMAN // LOW | MEDIUM | HIGH
  SPRING_STIFFNESS_FRONT // SOFT | MEDIUM | HARD
  SPRING_STIFFNESS_REAR // SOFT | MEDIUM | HARD
  OIL_THICKNESS_FRONT // THICK | MEDIUM | THIN
  OIL_THICKNESS_REAR // THICK | MEDIUM | THIN
  REAR_SHOCK_ANGLE // DEGREES (optional numeric)
  FRONT_SHOCK_ANGLE // DEGREES (optional numeric)
  REAR_SHOCK_REBOUND // NONE | LOW | MEDIUM | HIGH
  FRONT_SHOCK_REBOUND // NONE | LOW | MEDIUM | HIGH

  RIDE_HEIGHT_FRONT // MM
  RIDE_HEIGHT_REAR // MM
  DROOP_FRONT // MM
  DROOP_REAR // MM
  SHOCK_MOUNT_FRONT // INNER | MIDDLE | OUTER
  SHOCK_MOUNT_REAR // INNER | MIDDLE | OUTER
  UPPER_ARM_LENGTH // SHORT | MEDIUM | LONG
  LOWER_ARM_LENGTH_FRONT // MM
  LOWER_ARM_LENGTH_REAR // MM
  KPI_ANGLE // DEGREES

  GYRO_GAIN // PERCENT (0–100)
  GYRO_ORIENTATION // HORIZONTAL | VERTICAL | INVERTED
  SERVO_SPEED // SEC_60 (e.g. 0.06s)
  SERVO_TORQUE // KG_CM (e.g. 12kg·cm)
  SERVO_HORN_LENGTH // MM
  BUMP_STEER_SETTING // NONE | LOW | MEDIUM | HIGH
  STEERING_RATE // PERCENT (0–100)

  MOTOR_POSITION // LOW | MID | HIGH | REARWARD | FORWARD
  SPUR_GEAR // TOOTH COUNT (e.g. 90T)
  PINION_GEAR // TOOTH COUNT (e.g. 21T)
  FDR // NUMERIC (e.g. 4.5, 5.8)
  BELT_TENSION // LOOSE | MEDIUM | TIGHT

  FRONT_WHEEL_OFFSET // +3 | +5 | +7 | +10
  REAR_WHEEL_OFFSET // +3 | +5 | +7 | +10

  ESC_BOOST // DEGREES (e.g. 10)
  ESC_TURBO // DEGREES (e.g. 10)
  BATTERY_TYPE // SHORTY | FULL_SIZE | LCG
}

model Products {
  slug        String        @id
  title       String
  image       String
  description String?
  url         String
  trackId     String?       @db.Uuid
  status      ProductStatus @default(UNKNOWN)
  Tracks      Tracks?       @relation(fields: [trackId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  @@index([trackId])
  @@index([status])
  @@index([createdAt])
}

model Articles {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  image     String
  slug      String   @unique
}

model Posts {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  content   String
  images    String[]
  likes     PostLikes[]
  comments  PostComments[]
  userId    String
  trackId   String?        @db.Uuid
  user      Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  track     Tracks?        @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trackId])
  @@index([createdAt])
  @@index([trackId, createdAt])
}

model PostLikes {
  id                Int                 @id @default(autoincrement())
  postId            Int?
  userId            String
  createdAt         DateTime            @default(now())
  Posts             Posts?              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user              Users               @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserNotifications UserNotifications[]

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostComments {
  id                Int                 @id @default(autoincrement())
  postId            Int
  createdAt         DateTime            @default(now())
  content           String
  Posts             Posts?              @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId          Int?
  parent            PostComments?       @relation("parentComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies           PostComments[]      @relation("parentComment")
  userId            String
  user              Users               @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserNotifications UserNotifications[]

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@index([postId, createdAt])
}

model UserNotifications {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  createdAt DateTime      @default(now())
  user      Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId Int?
  comment   PostComments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  likeId    Int?
  like      PostLikes?    @relation(fields: [likeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Threads {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  messages  ThreadMessages[]
  users     ThreadUsers[]

  @@index([createdAt])
}

model ThreadUsers {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  threadId  Int
  userId    String
  user      Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread    Threads          @relation(fields: [threadId], references: [id], onDelete: Cascade)
  messages  ThreadMessages[]

  @@unique([threadId, userId])
  @@index([threadId])
  @@index([userId])
  @@index([createdAt])
  @@index([userId, threadId])
}

model ThreadMessages {
  id           Int         @id @default(autoincrement())
  threadId     Int
  content      String
  createdAt    DateTime    @default(now())
  threadUserId Int
  threadUser   ThreadUsers @relation(fields: [threadUserId], references: [id], onDelete: Cascade)
  thread       Threads     @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([threadUserId])
  @@index([createdAt])
  @@index([threadId, createdAt])
}

model Leaderboards {
  id          String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @default(now()) @updatedAt
  userId      String
  cutoff      Int?
  user        Users                    @relation(fields: [userId], references: [id])
  type        LeaderboardType          @default(TOURNAMENTS)
  tournaments LeaderboardTournaments[]
  drivers     LeaderboardDrivers[]
  tracks      Tracks[]
}

model LeaderboardTournaments {
  id            Int          @id @default(autoincrement())
  leaderboardId String       @db.Uuid
  tournamentId  String       @db.Uuid
  leaderboard   Leaderboards @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  tournament    Tournaments  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([leaderboardId, tournamentId])
  @@index([leaderboardId])
  @@index([tournamentId])
  @@index([leaderboardId, tournamentId])
}

model LeaderboardDrivers {
  id            Int          @id @default(autoincrement())
  leaderboardId String       @db.Uuid
  driverId      Int
  leaderboard   Leaderboards @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  driver        Users        @relation(fields: [driverId], references: [driverId], onDelete: Cascade)

  @@unique([leaderboardId, driverId])
  @@index([leaderboardId])
  @@index([driverId])
  @@index([leaderboardId, driverId])
}

enum QualifyingProcedure {
  BEST
  WAVES
}

enum LeaderboardType {
  TOURNAMENTS
  DRIVERS
}

enum TrackTypes {
  ALL
  TRACKS
  CLUBS
  SHOPS
}

enum ProductStatus {
  IN_STOCK
  SOLD_OUT
  BACKORDER
  UNKNOWN
}

enum TournamentsState {
  START
  QUALIFYING
  BATTLES
  END
}

enum TournamentsDriverNumbers {
  NONE
  UNIVERSAL
  TOURNAMENT
}

enum TournamentsFormat {
  STANDARD
  DOUBLE_ELIMINATION
  EXHIBITION
  WILDCARD
  BATTLE_TREE
}

enum BattlesBracket {
  UPPER
  LOWER
}

enum TrackStatus {
  ACTIVE
  ARCHIVED
  PENDING
  CLOSED
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum Regions {
  ALL
  UK
  EU
  NA
  ZA
  LA
  AP
}

enum ScoreFormula {
  CUMULATIVE
  AVERAGED
}
